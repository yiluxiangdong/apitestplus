# -*- encoding:utf-8 -*-# 从minio库中导入Minio客户端类import datetimeimport ioimport jsonimport osfrom urllib import responseimport pandas as pdimport yamlfrom flask import jsonifyfrom minio import Miniofrom urllib3.exceptions import ResponseErrorfrom common.pgUtil import pgDB# 实例化client = Minio(    # endpoint指定的是你Minio的远程IP及端口    endpoint="192.168.12.79:9050",    # accesskey指定的是你的Minio服务器访问key    # 默认值为minioadmin    access_key="minioadmin",    # secret_key指定的是你登录时需要用的key，类似密码    # 默认值也是minioadmin    secret_key="minioadmin",    # secure指定是否以安全模式创建Minio连接    # 建议为False    secure=False)bucket_name = "replays"# pg = pgDB('apitest')def getfiletpe(fileName):    if str(fileName).endswith('yaml') and str(fileName).startswith('testcase'):  # yaml测试用例文件        filetype = 1    elif str(fileName).endswith('xlsx') and str(fileName).startswith('testcase'):  # excel测试用例文件        filetype = 2    elif str(fileName).endswith('xls') and str(fileName).startswith('testcase'):  # excel测试用例文件        filetype = 2    elif str(fileName).endswith('xlsx') and str(fileName).startswith('template'):  # excel模板文件        filetype = 3    elif str(fileName).endswith('yaml') and str(fileName).startswith('template'):  # yaml模板文件        filetype = 4    elif str(fileName).endswith('jmx'):  # 压测脚本文件        filetype = 5    elif str(fileName).endswith('exe'):  # 辅助工具        filetype = 6    elif str(fileName).endswith('doc') or str(fileName).endswith('docx'):  # 普通文档        filetype = 7    elif str(fileName).endswith('py'):        filetype = 8  # python文件    else:        filetype = 9  # 其他文件    return filetype#判断文件minio是否存在def minioisExist(object_name):    if client.bucket_exists(bucket_name):        try:            if(client.stat_object(bucket_name=bucket_name,object_name=object_name).size>0):                return True            else:                return False        except:            return False#判断文件db是否存在def dbisExist(pg,fileName):    data = pg.selectdbFilename(fileName)    if len(data)>0:        return True    else:        return False# 文件上传def uploadfile(file_path):    pg = pgDB('apitest')    if client.bucket_exists(bucket_name):        # 使用with open打开目标文件        fileName = file_path.split('\\')[-1]        bytes_length = os.path.getsize(file_path)        size = round(bytes_length / 1024, 2)        if size > 1024:            size = f'{round(size / 1024, 2)}MB'        else:            size = f'{size}KB'        realfileName = file_path        fileSize = size        filetype = getfiletpe(fileName)        updatetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")        createTime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")        client.fput_object(bucket_name=bucket_name, object_name=fileName, file_path=file_path)        url = client.presigned_get_object(bucket_name, file_path)        if  dbisExist(pg,fileName): #mimio文件存在更新表            pg.updatedata(fileName,updatetime,url)        else:            pg.insertdata(url, fileName, filetype, fileSize, realfileName, createTime, updatetime)    else:        print("Bucket does not exist. Creating...")        client.make_bucket(bucket_name)#文件下载def minioUtilsdownload(local_path,object_name):    # localpath = os.makedirs(os.path.dirname(local_path), exist_ok=True)    try:        client.fget_object(bucket_name=bucket_name, object_name=object_name, file_path=f'{local_path}\\{object_name}')        return {'msg':f"File {object_name} downloaded successfully to {local_path}."}    except PermissionError:        return {'msg': f"Permission denied: Unable to write to {local_path}"}    except Exception as e:        return {'msg': f"An error occurred: {str(e)}"}#获取文件信息def getfileinfo():    filelist = []    for i in client.list_objects(bucket_name):        size = round(i.size / 1024, 2)        if size > 1024:            size = f'{round(size / 1024, 2)}MB'        else:            size = f'{size}KB'        pg = pgDB('apitest')        pg.insertdata(client.presigned_get_object(bucket_name, i.object_name),                               i.object_name.split('\\')[-1],                               getfiletpe(i.object_name),                               size,                               i.object_name,                               i.last_modified.date().strftime('%Y-%m-%d %H:%M:%S'))        filelist.append({            'filename': i.object_name.split('\\')[-1],            'realfilename': i.object_name,            'filezise': size,            'is_dir': i.is_dir,            'updateTime': i.last_modified.date(),            'url':client.presigned_get_object(bucket_name, i.object_name)        })    return filelistdef  strtolist(record,key):    if key in record and isinstance(record[key], str):        # Remove the outer brackets and split by comma        assertions = record[key].strip('[]').split(',')        # Strip whitespace from each assertion        assertions = [assertion.strip() for assertion in assertions]        record[key] = assertions    return record#读取某个文件中的测试数据def  getcasebyfile(file_name):        filetype = getfiletpe(file_name)        try:            data = client.get_object(bucket_name, file_name)            # 读取文件内容            if filetype == 1 :                content = data.data                buf = io.BytesIO(content)                buf.seek(0)                result = yaml.safe_load(buf)                for record in result:                    index = result.index(record)+1                    record['index'] = index                    record['filename'] = file_name                return result            elif filetype == 2 :                df = pd.read_excel(io.BytesIO(data.data), sheet_name=0)                result = df.to_dict('records')                for record in result:                    index = result.index(record)+1                    record['index'] = index                    record['filename'] = file_name                    strtolist(record, 'asserts')                    strtolist(record, 'save_key')                    if 'body' in record and isinstance(record['body'], str):                        try:                            record['body'] = json.loads(record['body'])                        except json.JSONDecodeError:                            # If JSON parsing fails, keep the original string                            pass                return result            else:                return None        except ResponseError as err:            return err#获取测试文件中所有的测试用例def getallcase():    result = []    for i in getfileinfo():        data = getcasebyfile(i.get('filename'))        if data:            result = result + data    return resultdef caseisExist(pg,interfaceName):    if len(pg.selectcasename(interfaceName))>0:        return True    else:        return Falsedef insercasedb():    pg = pgDB('apitest')    testcase = getallcase()    for i in testcase:        createTime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")        updateTime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")        # if i['interfaceName'] ==  'CRM系统_合同管理_销售人员新建合同保存':        if not i['save_key'] :            i['save_key'] = [""]        if not i['asserts']:            i['asserts'] =  [""]        if i.get('role'):            i['role'] = i['role']        else:            i['role'] = "null"        if caseisExist(pg,i['interfaceName']):           pg.updatecase(i['interfaceName'],i['module'],i['function'],i['level'],i['systemName'],i['role'],i['loop'],i['url'],i['method'],json.dumps(i['body']),i['save_key'],i['asserts'],updateTime,i['index'],i['filename'])        else:            pg.insertcase(i['interfaceName'],i['function'],i['systemName'],i['level'],i['loop'],i['method'],i['module'],i['role'],i['url'],json.dumps(i['body']),i['save_key'],i['asserts'],createTime,updateTime,i['index'],i['filename'])if __name__ == '__main__':    # # 指定目录路径    # directory = r'E:\sunwoda\config'    # # 获取目录下所有文件和文件夹的名字    # filenames = os.listdir(directory)    # #打印所有文件名    # for filename in filenames:    #     print(uploadfile(rf"{directory}\{filename}"))    # # minioUtilsupload(rf"E:\sunwoda\files\template.xlsx")    insercasedb()    # for i in (getallcase()):    #     print(i)